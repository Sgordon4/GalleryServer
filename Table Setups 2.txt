-- Notes:
-- Varchar is probably an inefficient type to store sha256 hashes


---------------------------------------------------------------------------------------------


-- Note to self, make sure you're running these after connecting to the correct database, moron
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gallery;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO gallery;

ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO gallery;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE ON SEQUENCES TO gallery;


drop table if exists journal;
drop table if exists account;
drop table if exists file;
drop table if exists block;

	

---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.file;

CREATE TABLE IF NOT EXISTS public.file
(
	fileuid uuid NOT NULL default gen_random_uuid() primary key,
	accountuid uuid NOT NULL,
	isdir boolean NOT NULL default false,
	islink boolean NOT NULL default false,
	isdeleted boolean NOT NULL default false,
	ishidden boolean NOT NULL default false,
	userattr json NOT NULL default '{}',
	fileblocks varchar[] NOT NULL default '{}',
	filesize bigint NOT NULL default 0,
	filehash varchar,
	changetime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc'))),
	modifytime bigint,
	accesstime bigint,		--Maybe get rid of this one, very inconvenient
	createtime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc'))),
	attrhash varchar
);


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.journal;

CREATE TABLE IF NOT EXISTS public.journal
(
	journalid BIGSERIAL NOT NULL primary key,
	fileuid uuid NOT NULL references file (fileuid),
	accountuid uuid NOT NULL, --references account (accountuid),
	fileblocks varchar[] NOT NULL default '{}',
	filehash varchar,
	attrhash varchar,
	changetime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc')))
);



-- Note: Do not include foreign key constraint on accountuid.
-- Uploading an existing account to server requires uploading the root file first, then the account.
-- However, the file put triggers a put to journal, which errors because the account doesn't exist. 


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.block;

CREATE TABLE IF NOT EXISTS public.block
(
	blockhash varchar NOT NULL primary key,
	blocksize integer NOT NULL default 0,
	createtime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc')))
);


-- Note: To avoid race conditions, the block itself should be uploaded BEFORE a block entry is created


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.account;

CREATE TABLE IF NOT EXISTS public.account
(
	accountuid uuid NOT NULL default gen_random_uuid() primary key,
	rootfileuid uuid NOT NULL references file (fileuid),
	email varchar NOT NULL UNIQUE,
	displayname varchar NOT NULL,
	password varchar NOT NULL,
	isdeleted boolean NOT NULL default false,
	logintime bigint,
	changetime bigint,
	createtime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc')))
);


-- Note: Creating an account entry requires that the rootfile already exist in the file table.
-- This avoids race conditions and problems due to bad connection


---------------------------------------------------------------------------------------------


-- Postgres runs triggers in alphabetical order


CREATE OR REPLACE FUNCTION hash_file_attributes() RETURNS TRIGGER AS $$
BEGIN
	NEW.attrhash := digest(concat(
		NEW.fileuid, NEW.accountuid, NEW.isdir, NEW.islink, NEW.isdeleted, NEW.userattr,
		NEW.fileblocks, NEW.filesize, NEW.filehash, 
		NEW.changetime, NEW.modifytime, NEW.accesstime, NEW.createtime
	), 'sha1');
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE TRIGGER file_hash_attr_insert BEFORE INSERT ON file 
FOR EACH ROW EXECUTE PROCEDURE hash_file_attributes();

CREATE OR REPLACE TRIGGER file_hash_attr_update BEFORE UPDATE 
OF isdir, islink, isdeleted, userattr, fileblocks, filesize, filehash, 
changetime, modifytime, accesstime, createtime ON file 
FOR EACH ROW EXECUTE PROCEDURE hash_file_attributes();





CREATE OR REPLACE FUNCTION insert_to_journal() RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO journal (fileuid, accountuid, fileblocks, filehash, attrhash, changetime)
	VALUES (NEW.fileuid, NEW.accountuid, NEW.fileblocks, NEW.filehash, NEW.attrhash, NEW.changetime);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE TRIGGER file_insert_to_journal AFTER INSERT ON file 
FOR EACH ROW EXECUTE PROCEDURE insert_to_journal();

CREATE OR REPLACE TRIGGER file_update_to_journal AFTER UPDATE 
OF attrhash ON file 
FOR EACH ROW EXECUTE PROCEDURE insert_to_journal();


