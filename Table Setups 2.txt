Notes:
Varchar is probably an inefficient type to store sha256 hashes


---------------------------------------------------------------------------------------------


-- Note to self, make sure you're running these after connecting to the correct database
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gallery;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO gallery;


drop table if exists block;
drop table if exists journal;
drop table if exists file;
drop table if exists account;


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.account;

CREATE TABLE IF NOT EXISTS public.account
(
	accountuid uuid NOT NULL default gen_random_uuid() primary key,
	rootfileuid uuid NOT NULL references file (fileuid),
	email varchar NOT NULL UNIQUE,
	displayname varchar NOT NULL,
	password varchar NOT NULL,
	isdeleted boolean NOT NULL default false,
	logintime timestamp without time zone,
	changetime timestamp without time zone,
	createtime timestamp without time zone NOT NULL default (now() at time zone 'utc')
);


-- Note: Creating an account entry requires that the rootfile already exist in the file table.
-- This avoids race conditions and problems due to bad connection
	

---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.file;

CREATE TABLE IF NOT EXISTS public.file
(
	fileuid uuid NOT NULL default gen_random_uuid() primary key,
	accountuid uuid NOT NULL,
	isdir boolean NOT NULL default false,
	islink boolean NOT NULL default false,
	fileblocks varchar[] NOT NULL default '{}',
	filesize bigint NOT NULL default 0,
	filehash varchar,
	isdeleted boolean NOT NULL default false,
	changetime timestamp without time zone,
	modifytime timestamp without time zone,
	accesstime timestamp without time zone,		--Maybe get rid of this one
	createtime timestamp without time zone NOT NULL default (now() at time zone 'utc')
);


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.journal;

CREATE TABLE IF NOT EXISTS public.journal
(
	journalid BIGSERIAL NOT NULL primary key,
	fileuid uuid NOT NULL references file (fileuid),
	accountuid uuid NOT NULL --references account (accountuid), 
	isdir boolean NOT NULL default false,
	islink boolean NOT NULL default false,
	fileblocks varchar[] NOT NULL default '{}',
	filesize bigint NOT NULL default 0,
	filehash varchar,
	isdeleted boolean NOT NULL default false,
	changetime timestamp without time zone NOT NULL default (now() at time zone 'utc')
);


-- Note: Do not include foreign key constraint on accountuid.
-- Uploading an existing account to server requires uploading the root file first, then the account.
-- However, the file put triggers a put to journal, which errors because the account doesn't exist. 


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.block;

CREATE TABLE IF NOT EXISTS public.block
(
	blockhash varchar NOT NULL primary key,
	blocksize integer NOT NULL default 0,
	createtime timestamp without time zone NOT NULL default (now() at time zone 'utc')
);


-- Note: To avoid race conditions, the block itself should be uploaded BEFORE a block entry is created

---------------------------------------------------------------------------------------------


CREATE OR REPLACE FUNCTION insert_to_journal() RETURNS TRIGGER AS $journal_put$
BEGIN
	INSERT INTO journal (accountuid, fileuid, isdir, islink, fileblocks, filesize, filehash, isdeleted)
	VALUES (NEW.accountuid, NEW.fileuid, NEW.isdir, NEW.islink, NEW.fileblocks, NEW.filesize, NEW.filehash, NEW.isdeleted);
	RETURN NEW;
END;


CREATE TRIGGER file_insert_to_journal AFTER INSERT ON file 
FOR EACH ROW EXECUTE PROCEDURE insert_to_journal();

CREATE TRIGGER file_update_to_journal AFTER UPDATE 
OF accountuid, isdir, islink, fileblocks, filesize, filehash, isdeleted ON file 
FOR EACH ROW EXECUTE PROCEDURE insert_to_journal();









CREATE OR REPLACE FUNCTION update_changetime() RETURNS TRIGGER AS $$
BEGIN
	NEW.changetime = (now() at time zone 'utc');
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- DO NOT USE
--CREATE TRIGGER update_changetime_file BEFORE UPDATE ON file
--FOR EACH ROW EXECUTE PROCEDURE update_changetime();

-- DO NOT USE
--CREATE TRIGGER update_changetime_account BEFORE UPDATE ON account
--FOR EACH ROW EXECUTE PROCEDURE update_changetime();


-- I've decided changetime should be a more manual change, 
-- especially since we need to directly set changetime when copying a file from local




-- TODO We probably want to add an update cancel if an update contains the exact same data as the current row
-- Skip update if new equals old 