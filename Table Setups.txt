-- Notes:
-- Varchar is probably a not-great type to store sha256 hashes, we should use bytea or something


---------------------------------------------------------------------------------------------


-- Note to self, make sure you're running these after connecting to the correct database, moron
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO gallery;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO gallery;

ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO gallery;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE ON SEQUENCES TO gallery;


drop table if exists journal;
drop table if exists account;
drop table if exists file;
drop table if exists block;

	

---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.file;

CREATE TABLE IF NOT EXISTS public.file
(
	fileuid uuid NOT NULL default gen_random_uuid() primary key,
	accountuid uuid NOT NULL,
	isdir boolean NOT NULL default false,
	islink boolean NOT NULL default false,
	isdeleted boolean NOT NULL default false,
	fileblocks varchar[] NOT NULL default '{}',
	filesize bigint NOT NULL default 0,
	filehash varchar,
	userattr json NOT NULL default '{}',
	attrhash varchar,
	changetime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc'))),
	modifytime bigint,
	accesstime bigint,		--Maybe get rid of this one, very inconvenient
	createtime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc')))
);


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.journal;

CREATE TABLE IF NOT EXISTS public.journal
(
	journalid BIGSERIAL NOT NULL primary key,
	fileuid uuid NOT NULL, --references file (fileuid),
	accountuid uuid NOT NULL, --references account (accountuid),
	filehash varchar,
	attrhash varchar,
	changetime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc')))
);



-- Note: Do not include foreign key constraint on accountuid.
-- Uploading an existing account to server requires uploading the root file first, then the account.
-- However, the file put triggers a put to journal, which errors because the account doesn't exist. 


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.block;

CREATE TABLE IF NOT EXISTS public.block
(
	blockhash varchar NOT NULL primary key,
	blocksize integer NOT NULL default 0,
	createtime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc'))), 
	usecount integer NOT NULL default 0
);


-- Note: To avoid race conditions, the block itself should be uploaded BEFORE a block entry is created


---------------------------------------------------------------------------------------------


-- DROP TABLE IF EXISTS public.account;

CREATE TABLE IF NOT EXISTS public.account
(
	accountuid uuid NOT NULL default gen_random_uuid() primary key,
	rootfileuid uuid NOT NULL, --references file (fileuid),
	email varchar NOT NULL UNIQUE,
	displayname varchar NOT NULL,
	password varchar NOT NULL,
	isdeleted boolean NOT NULL default false,
	logintime bigint,
	changetime bigint,
	createtime bigint NOT NULL default extract(epoch from date_trunc('second', (now() at time zone 'utc')))
);


-- Note: Creating an account entry requires that the rootfile already exist in the file table.
-- This avoids race conditions and problems due to bad connection


---------------------------------------------------------------------------------------------


-- Postgres runs triggers in alphabetical order

DROP TRIGGER IF EXISTS file_hash_attr_insert ON file;
DROP TRIGGER IF EXISTS file_hash_attr_update ON file;
DROP FUNCTION IF EXISTS hash_file_attributes;


CREATE OR REPLACE FUNCTION hash_file_attributes() RETURNS TRIGGER AS $$
BEGIN
	NEW.attrhash := UPPER(encode(digest(NEW.userattr::varchar, 'sha1'), 'hex'));
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE TRIGGER file_hash_attr_insert BEFORE INSERT ON file 
FOR EACH ROW EXECUTE PROCEDURE hash_file_attributes();

CREATE OR REPLACE TRIGGER file_hash_attr_update BEFORE UPDATE OF userattr ON file 
FOR EACH ROW EXECUTE PROCEDURE hash_file_attributes();



------------------------------------------------------



DROP TRIGGER IF EXISTS file_insert_to_journal ON file;
DROP TRIGGER IF EXISTS file_update_to_journal ON file;
DROP FUNCTION IF EXISTS insert_to_journal;


CREATE OR REPLACE FUNCTION insert_to_journal() RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO journal (fileuid, accountuid, filehash, attrhash, changetime)
	VALUES (NEW.fileuid, NEW.accountuid, NEW.filehash, NEW.attrhash, NEW.changetime);
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE TRIGGER file_insert_to_journal AFTER INSERT ON file 
FOR EACH ROW EXECUTE PROCEDURE insert_to_journal();

CREATE OR REPLACE TRIGGER file_update_to_journal AFTER UPDATE OF attrhash, filehash, isdeleted ON file 
FOR EACH ROW 
WHEN ((NEW.attrhash IS DISTINCT FROM OLD.attrhash) OR 
	(NEW.filehash IS DISTINCT FROM OLD.filehash) OR 
	(NEW.isdeleted IS false AND OLD.isdeleted IS true))
EXECUTE PROCEDURE insert_to_journal();


